The ASCII Project Changelog
Copyright (c) 2012 Jonathan Rumion
12/03/2012
==================================

03/03/2013

- Network Data passing Handlers
- World Generation Thread
- WorldEngine Definition
- Threaded Server Setup
- File Logger - $fs/logs/error.log
- Documentation (Apothecary) Started
- New developers onboard (fonebook, fall3nsp0rk)
- Web Scripts for account creation



0.0.1f

It's been a long time since I deferred to this changelog D: , if you're reading this, anything you compile from here on up has been the result 
of our "experimental" branch.


0.0.0l

Updates are coming too often to keep this updated, please refer to http://www.theasciiproject.com for more information.


0.0.0j(Rev 5)

Asynchronous networking has been stabilized, however there will likely be a rewrite of the data packing methods in order to cut down on the bandwidth overhead.


0.0.0i(Rev 3)

I've gone through and have updated all of the "original" code in the project
to conform to the C++11 standard, in order to allow for greater portability
and to take advantage of the exciting new features in C++11.

Unfortunately I've wasted a good amount of time trying to get C++ Sockets up
to date on the standards requirements. Though I was able to make great
progress, I have still been unable to get it to compile properly on GCC 4.7

Because of that I've moved my development environment over to OSX and
Xcode 4.3.3. I've added the necessary files to the project under the "xcode"
directory for new users and developers to easily launch the same IDE setup
that I am using. I have also included the necessary shared and static
libraries for libtcod and C++ Sockets (temporary, see below), as well as the
SDL framework for a seamless OSX application target.

It's very nice to launch the client on OSX as a single packaged file, with
all of the library and font resources packed into it. This should have no
effects on the rest of the project source code however, as I'm making sure that
the project Makefiles still work on Linux (GCC 4.3/4.4 however).

In relation to the above, I am remove dependency on the C++ Sockets library
and integrating the usage of the Boost C++ Libraries instead. The first of 
which will be the Boost.Asio library.

Networking has just been integrated, however the difficult parts of getting
it to work have already been resolved in the serialization libraries, which
means that switching to a "better" networking library won't set me back for
too long.

I also think it's important that we start thinking about multithreading now,
and a networking library with asynchronous I/O is absolutely necessary in the
server engine or else handling multiple users and entities in the way that
we intend to in the long run will be insanely difficult to accomplish.

-Yamamushi 




0.0.0i

Well it sure has been a journey, however after staying up for days on end
straight programming to get here, I'm happy to say that the "Heart" of our
project has now been set in motion.

That is to say, networking is now working at a fundamental level. While there
is still a lot of work to be done in the way of getting user logins to work
and synchronizing commands between the client and the server, it's still pretty
amazing to see the client being rendered from data being sent from the server
over a thousand miles away.

There's not much in the way of latency hiccups now, but I'm sure that will
change when we actually get to the point to where we can really test the server
with some heavy traffic.

It's been a long road, if you count the time from when the project was first
conceived. It's going to be a very long road ahead of us from here, but now
I'm positive that we're well on our way to taking over the world.

One Character At A Time.

-Yamamushi






0.0.0h

Moving towards network library integration, the client rendering now relies on
a new class called "ClientMap", which stores and manages a struct of type
render_t.

The struct "render_t" stores color information for each coordinate on the map,
which is then used by "GraphicsTCOD" (or any graphics rendering system someone
chooses to write), to draw the corresponding information to the screen. This is
done by passing a pointer to a ClientMap Object as the initialization parameter
to GraphicsTCOD.

Right now GraphicsTCOD still does a lot of "thinking" internally, but once
networking has been set in motion, I'll go back and rework things so that more
calculations are done on the server rather than allowing clients to see so much
information.

I'm currently working on getting "ClientMap" populated via calls to the server
for a particular entity. Once I have the client and server talking at a basic
level, I'll work in a proper login system and we'll go from there.

-Yamamushi




0.0.0g

I've completed the integration of Unicode characters into the project, and I
have also implemented a (probably temporary) solution to rendering Tiles
depending on their orientation to other tiles (ie, wall graphics).



0.0.0f

Okay so this was enough of a change that I felt like moving the version number
up to 0e :)

I have created a 100% complete bitmap font.png for this project, and I guess
for the "World" to use. The ones I dug up online, and even from the libtcod
forums weren't 100% complete and it took me a heck of a time to find out there
was a "ttf2png" tool on the interwebs.

I've tested and implemented the font pack into the project, and it can be seen
if you compile and run the client ("make all" for those of you too lazy to
read the install file in this directory).

I'm excited about this change, as it opens the door to finally tackle Tile
issues and moving on to bringing "life" into the client :)





0.0.0e(rev2)

A minor update to change where classes are organized.





0.0.0e(rev1)

Actually there aren't many large changes in this push.

I have started using NetBeans as an IDE because of it's portability and minimal
interference. Because of this, you will notice that there is now a directory
labeled "nbproject" in the project files.

I believe, however don't quote me on this, that this will allow people to import
this project into netbeans with minimal effort.

Until next changelog update,
-Yamamushi





0.0.0e

Cleaned up quite a lot with this push, finally settled on a coloring system that
was wasy to manage and was fairly portable.

From here I'll add a few more features to entities and the entity map that
allows for entities that exist on different map layers to populate a single
entity map.





0.0.0d

Cleaning more things up, finally settled on a base framework for entity
placement and management.

There is an issue with entity colors not being passed properly, or with the
rendering engine, I haven't figured out which is responsible but it is a glaring
bug that will need to be addressed before I continue.





0.0.0c

FOV is working! At least in basic terms, it's not clean but it certainly works
for now!

I got caught up for several hours on computing it properly all because I
couldn't bother to read some documention properly.

Next up, likely more cleanup and organization before we continue, but we're
slowly getting there!





0.0.0b

More improvements on the room generator - halls now auto generate.

Bounds checking has been broken up into pieces - Map object still has a function
to see if a point is in a valid spot however.




0.0.0a

Basic room generator written. It will create a group of rooms that don't
intersect, and put the player in one of them.

Bounds checking in place, but will be moved elsewhere as it does not belong in a
Map object.




0.0.0

Basic game engine, VERY basic game engine. Slowly making fixes and modifications
with long term development in mind.
